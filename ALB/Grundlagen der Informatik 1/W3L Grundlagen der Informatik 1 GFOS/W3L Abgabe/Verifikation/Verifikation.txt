Verifikation Alice Bedow
Anfangsbedingung Q: n > 0 (Zeile 4)
Endebedingung R: (n+1)*n/2 (Zeile 13)
Invariante P: summe == (i-1)*i/2 (Zeile 8,9,12)
Wiederholungsbedingung B: i != (n+1) (Zeile 8) not B: i==(n+1) bzw. !(i!=(n+1)) (Zeile 13)
Die nachfolgende verifizierte Darstellung des Programms verdeutlicht dies, da diese Zusicherungen meist zwischen 2 Zeilen zutreffen. Zudem wird die G端ltigkeit der Invarianten nachgewiesen.

Verifiziertes Programm ( {} = Zusicherung (w端rde im Programm durch assert ersetzt werden):

int i,summe;
{Q: n>0}
{0 == 0}
summe = 0;
{summe == (1-1)*1/2} -> {summe==0}
i=1;
{P: summe == (i-1)*i/2}
while(i!=(n+1)) {B: i!=(n+1)
{
	{P and B: (i-1)*i/2 and i!=(n+1)}
	{summe+i == i*(i+1)/2} -> {summe == i*(i+1)/2 -i} -> {summe == i*(i+1)/2-2i/2} -> {summe == (i*(i+1)-2i)/2} -> {summe == (i*(i+1-2))/2} -> {summe == i*(i-1)/2}
	summe = summe + i;
	{P: summe == (i+1-1)*(i+1)/2} -> {P: summe == i*(i+1)/2}
	i = i + 1;
	{P: summe ==(i-1)*i/2}
}
{P and not B: summe == (i-1)*i/2 and !(i!=(n+1))} -> {P and not B: (i-1)*i/2 and i==(n+1)}
{R: summe == (n + 1) * n /2}
return summe;

Wertetabelle
Zeile 8	(am Anfang und unmittelbar vor der Schleife(0))				
Durchlauf	n	summe	i	Ergebnis f端r P	Ausgeschrieben
0			5	0		1	0				(1-1)*1/2
1			5	0		1	0				(1-1)*1/2
2			5	1		2	1				(2-1)*1/2
3			5	3		3	3				(3-1)*1/3
4			5	6		4	6				(4-1)*1/3
5			5	10		5	10				(5-1)*1/3
Zeile 12 (unten in der Schleife)					
Durchlauf	n	summe	i	Ergebnis f端r P	Ausgeschrieben
1			5	0		2	1				(2-1)*1/2
2			5	1		3	3				(3-1)*1/3
3			5	3		4	6				(4-1)*1/3
4			5	6		5	10				(5-1)*1/3
5			5	10		6	15				(6-1)*1/3
